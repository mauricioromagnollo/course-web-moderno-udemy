$ ng g c nome-do-componente
$ ng g s nome-do-service

Criando uma diretiva:
$ ng g d nome-da-diretiva

## Diretivas

### Diretiva de Atributo

Altera a aparência e o comportamento de um elemento, componente ou outra diretiva.

```js
@Directive({
  selector: '[appRed]'
})
export class RedDirective {
  constructor(element: ElementRef) {
    element.nativeElement.style.color = '#e35e6b';
  }
}
```

```html
<i class='material-icons v-middle' appRed>
  favorite
</i>
```

### Diretiva Estrutural

Altera o layout adicionando e removendo elementos da DOM.

```html
<form *ngIf="product" class="product-form">
</form>
```

```html
<ul>
  <li *ngFor="let product of products">
    {{ product.name }}
  </li>
</ul>
```

## Binding

### Property Binding

```html
<table [dataSource]="products"></table>
```
```js
export class ProductReadComponent implements OnInit {
  products: Product[];
}
```

### Event Binding

```html
<button (click)="createProduct()">
  Salvar
</button>
```

```js
export class ProductCreateComponent implements OnInit {
  createProduct(): void {
    ...
  }
}
```

### One-way Data Binding

Enviando informações do componente para o HTML.

```html
<input [value]="nome">
```

```js
nome: string;
```


### Two-way Data Binding

Se você alterar no TypeScript o html é atualizado e vice-versa. O html também altera o typescript.

```html
<input [(ngModel)]="nome">
```

```js
nome: string;
```

## Angular Router

```html
<a routerLink="/products">
  Produtos
</a>
```

```js
const routes: Routes = [{
  path: "products",
  component: ProductCrudComponent
}, {
  path: "products/create",
  component: ProductCreateComponent
}];
```

```html
<mat-sidenav-content>
  <router-outlet></router-outlet>
</mat-sidenav-content>
```

## Angular Pipes

```html
<p>
  O vencimento é {{ produto.vencimento | date }}
</p>
```

Os pipes podem ser encadeados também "channing":

```html
<p>
  O vencimento é {{ produto.vencimento | date: 'fullDate' | uppercase }}
</p>
```

## Programação Reativa (ReactiveX) - rxjs

### Observables

Diferente das Promises, os Observables 
 - Reusável
 - Stream de Dados
 - Operadores

## Padrões de Projetos

### Observer

Padrão de projeto orientado a evento!

### Injeção de Dependencia

É um padrão no qual a classe recebe as dependências de uma fonte externa ao invés de criar por conta própria. Ou seja, a classe não irá instânciar a dependência, apenas receber diretamente a instância.

### Singleton

...

## Services

São classes que tem como principal objetivo organizar e compartilhar métodos e dados entre compontes.

O Angular utiliza o padrão Singleton nos Services, ou seja, toda vez que você injeta o seu service em qualquer componente, ele sempre irá trabalhar com a mesma instância.

O decorator @Injectable do angular, faz com que o próprio Angular instancie essa classe para você. Quando você utiliza a propriedade providedIn: 'root', o Angular faz com que apenas uma única instância desse service, sirva para a aplicação toda e o provider dele vai ser o AppModule.

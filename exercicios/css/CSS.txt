# TÓPICOS:

--------------------------------------------------------
    * Selectors (seletores)
        - id 
        - a própria <tag> tag { ... };
        - classe 
        - pseudo-classe 
        - pseudo-elemento
        - seletor universal '*'.    * { ...universal styles };
    * Padrões de Nomeclaturas
        - camelCase 
        - dash-case (mais utilizado no padrão do css!) 
    * CSS Externo, Interno e Inline 
    * Especificidade:
        - Quais seletores possuem prioridade?
        - operador: !important 
    * Herança 
    * Box Model 
        - margin
        - border 
        - padding 
        - content     
    * Margin Collapse 
    * Propriedade 'display'
    * Calcular altura e largura 
    * Box Sizing 
    * overflow
    * float/clear
    * Cores (hls,hlsa,rgb,rgba...)
    * Unidades (Dimensões dos elementos e fontes)
        - Absolutas 
        - Relativas (Variam de acordo com o tamanho da tela! :) )
        - Percentual (%)
        (*) Trabalhar com unidades relativas para tornar recursivo o projeto;
    * Textos/Fontes 
        - Fontes padrões "herdadas" através de unidades relativas como (1em e 100%)
        - Sempre trabalhar com unidades relativas em fontes também;
        - text-decoration: none; /* remover underline de links */
    * Propriedade { position: ; }
    * Media Query (Responsividade)
    * Flex Box (CSS3)
    * CSS Grid

--------------------------------------------------------

- padrão nomeclatura (dash-case e camelCase)
- Origem CSS: Externo, Interno e Inline
- Especificidade (Quais seletores tem mais força e prioridade!, operador: !important)
- Herança
- Box Model (margin, border, padding e content)
- Margin Collapse
- Propriedade 'display
    {
        display: inline-block;
        display: block;
        display: grid;
    }
- Calcular altura e largura
    - Elementos inline largura e altura não são considerados
    - criar altura para html e body;
        html body {
            height: 100%;
        }
    - Lembrar dos espaços em tags html quando usar inline-block;
- Box Sizing 
    {
        box-sizing: border-box;
        box-sizing: content-box;
    }
- Propriedade overflow
    == quando um componente extrapola as bordas sobre o outro
- Propriedade float/clear
    * clear é para limpar a flutuação de um elemento anterior;
    * Não é tanto usado, flatBox é mais utilizado!
- Cores (lógica do hsl/rgb)
    https://www.w3schools.com/colors/colors_hsl.asp
    https://coolors.co/
    http://paletton.com/
    - Formas de representar as cores;
    - hue, saturation e lightness (hls);
    hsl(299, 58%, 50%);
    hsla(299, 58%, 50%, 0.5)
    rgb(155, 110, 220);
    rgba(155, 110, 220, 0.5); /* 0 -> transparência total, 0.5 -> 50%, 1-> sem transparência */


--------------------------------------------------------

# Ferramenta de desenvolvedor do google chrome (F12)

<link rel="stylesheet" href="style.css">

http://files.cod3r.com.br/curso-web/css.zip

* A exibição do stilo depende da ordem de processamento, o último a ser processado irá sobrepror;

* Você deve visualizar os componentes da tela como caixas/retângulos;

* Você pode aplicar estilo a tags específicas, pode também utilizando id, porém... talvez a melhor forma de aplicar o css seria através das clases .classe{ }. Porém, isso não quer dizer que os outros seletores não serão usados.
* É possível aplicar css também utilizando javascript;

# Tente manter uma padronização de nomeclatura!

É possível escrever códigos css "inline", ou seja, diretamente na tag, em arquivos separados (.css, .sass), ou dentro da tag <style> ... </style>

# Padrão de nomeclatura?
    - Por padrão, as propriedades do css usam 'dash-case' ao invés de 'camelCase', como estamos acostumados. 
    As classes geralmente são criadas com dash-case, mas não é errado escrever .nomeDaClasse{ } usando Camel.
    !!! é importante manter o padrão, usar só dash-case ou camelCase no seu projeto;


# SELETORES 

    * 
    elem 
    .class 
    #id 
    [atrib]
    :pseudo-class 
    ::pseudo-elementos

    div + p     adjacent sibling -> irmãos adjacentes, um ao lado do outro
    div ~ p     general sibling  -> irmãos dentro do mesmo pai, porém não obrigatoriamente um ao lado do outro ('irmão geral')
    div > p     child -> filho direto
    div p       descendant -> qualquer elemento que estiver dentro da tag
    div, p      -> irá aplicar os estivos em div, p

    - dependendo do seletor você vai ter uma melhor/mais rápida performance;


# BOX MODEL:


# margin Collapse:
    - As margens se sobrepoem!
    - Solução para margin collapse:
        { 
            float: left / right
            position: absolute
            display: inline-block
        }
        
# Propriedade 'display':

    ! se aparecer alguma linha ao usar: 
        display: inline-block;

        então verifique o html se possui algum espaço
        na tag <nav>ESPAÇO<nav> por exemplo. Porquê o 
        espaço no html gera a linha indesejada;    - Unidades (Dimensões dos elementos e fontes)

# UNIDADES 

    Absoluto (px, cm, mm, ...)
    Viewport(vh, vw, vmin, vmax) // altura da tela
        - vh -> altura da tela de 0 100     vh = 1/100
        - vw -> largura da tela
        - vmin -> sempre o valor menor, não importa se de altura ou largura
        - vmax -> sempre o valor maior, de algura ou lagura
            * O vmin e vmax variam de acordo com a tela, 
              ex: Quando viramos o celular de lado, tela inteira

    Font (rem, em)
        em -> tag pai 
        rem -> tag Raíz
    % -> CASO ESPECIAL!
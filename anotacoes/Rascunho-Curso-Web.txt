--------------------------------------------------------------------
# SEÇÕES (1 a 7):
--------------------------------------------------------------------
Esta parte do curso foi anotada diretamente em arquivos de código no diretório ../JavaScript/fundamentos

--------------------------------------------------------------------
# SEÇÃO (8):
--------------------------------------------------------------------

# Visão Geral Sobre o NodeJS:

    - O é o que esta rodando no servidor/beckend. Todos os exercícios de fundamentos de JavaScript foram executados utilizando o node.
    - A forma de executar o node é símples:     $ node arquivo.js
    - O Node usa o mesmo interpretador de JavaScript do Browser, o V8.
    - O Node é o ambiente de execução do JavaScrip no servidor.
    - O Node é uma soma do V8 + LIBUV

    WebServers:
        - nginx (Melhor, utiliza somente uma thread)
        - apache (Utiliza uma thread para cada requisição)


# Sistema de Módulos:

    - Ver sobre padrões de projetos (Ex: Padrão Layers "Camadas")
    - Os projetos beckend e frontend possuem formas de organizaçẽos diferentes. Organizações de arquivos, pastas... por exemplo, projetos frontend, no final eles são "minificados" utilizando um conversor e compactados em poucos arquivos, independente se o projeto estiver organizado em várias pastas e arquivos. Versão minificada do código: os arquivos quando são minificados, ou seja, você usa um conversor para diminuir o seu código, remover espaços, comentários... isso faz com que o seu site possua uma resposta mais rápida. Já no beckend, não é necessário minificar e compactar o projeto, porque o código não irá pro browser, somente para o servidor.
    - Dentro do Node, cada arquivo representa um módulo e tudo o que você escreve dentro do módulo, permanece visível somente para ele.
    - Para tornar um módulo disponível para outro arquivo (importar e exportar), é possível utilizando "require".


# Arquivo package.json
    - Arquivo descritor de um projeto em NodeJS

# Instância única VS nova instância

--------------------------------------------------------------------
# SEÇÃO (9):
--------------------------------------------------------------------
- let e const
- template string
- destructuring
- arrow function e (this)
- parâmetros default
- ES8: Object.values 
- ES*: Object.entries
- class/extends
- operador: Rest(Juntar) "..." ou Spread(Espalhar)
- taggedTemplate
- Estrutura Map
- Estrutura Set
- Promises
- for Off
- callbacks aninhadas
- Refatorando Callbacks p/ Promises
- ES8: Async/Await


http://cod3r.com.br/curso0js/turmaA.json
http://cod3r.com.br/curso0js/turmaB.json
http://cod3r.com.br/curso0js/turmaC.json

--------------------------------------------------------------------
# SEÇÃO (10):
--------------------------------------------------------------------
- DevOps

# Breve História da Internet:
    - 1850 (Computador Eletrônico)
    - 1960 (ARPANET - Departamento de Defesa Americano)
    - 1970 (TCP/IP - Robert E. Hahn & Vint Cerf)
    - 1980 (WWW - Tim Berners-Lee)
    - 1990 (Internet no Brasil)
    - 2000 (iG, Redes Sociais, Internet em Casa)

# TCP/IP:

    º Aplicação
        - HTTP, FTP, SMTP..
        - Comunicação Processo-A-Processo
        - Número da Porta   
        
    º Transporte
        - TCP e UDP (DNS usa UDP e não TCP)
        - Comunicação Host-A-Host
        - Confiabilidade
    º Internet
        - Endereço IP
        - Conexão entre redes
        - Trasnferência de Pacotes

    º Rede/Física
        - Ethernet, Wifi...
        - MAC adress
        - Hardware e Enlance (Software)

# Anatomia do IPv4:
    - Classe A (255.0.0.0)
        192.168.100.230
        REDE: 192
        HOST: 168.100.230

        -: Máscara de Sub-Rede (255.0.0.0)
            - Sempre que o bit tiver valor 1, aponta para uma rede
            - Sempre que tiver valor 0, aponta para uma máquina

    - Classe B (255.255.0.0)

    - Classe C (255.255.255.0)
        = As três primeiras partes, mapeiam uma rede, a última parte mapeia a máquina. Isso significa que praticamente você tem disponível 255 máquinas para inserir nessa rede.

# Conceito de Porta...
    - Porta na verdade é um processo associado a um número.

[ Comp. 1 ]             Comp. 2
10.85.0.4               10.85.0.5
    Rodando:                Rodando:    
        - Skype                 - Github Desk
        - Chrome                - Chrome
        - Apache                - Node
        - Dropbox               - MySQL

    - Identificar não só a máquina, mas quais processos a máquina está executando.

    - Ex: Vamos supor que o -Node em Comp.2 está rodando na porta 8080.
Para fazer uma requisição da primeira máquina, Comp. 1 seria 
http://10.85.0.5:8080


---------------------------------------------------------------------------------------------
# PROTOCOLO HTTP (HIPER TEXT TRANSFER PROTOCOL):
---------------------------------------------------------------------------------------------
- Textos, imagens, vídeos... linkados
- São documentos escritos em html (hiper text markup language)
- Faz parte da Camada de Aplicação do TCP/IP
- Nativamete o Protocolo é Stateless, ou seja, não tem estado (quando uma máquina manda uma requisição para um servidor,
  pro servidor é como se fosse a primeira vez, primeira requisição)
- Qunado abre uma conexão tem um "Handshake" de comunicação
- É um Protocolo Cliente-Servidor.. Eu mando uma url com um conjunto de parâmetros, faço uma requisição
  e obtenho resposta;
- Opera em cima da pilha TCP/IP
- retorna HTML, CSS, JS, Mídias, JSON...
- Fluxo básico:
    - Usuário informa URL
    - Browser gera a Requisição (Requisição do tipo GET)
    - Servidor WEB gera a Resposta
    - Browser pega a resposta e renderiza/exibe a página
- Métodos do HTTP:
    - GET
    - POST 
    - PUT 
    - DELETE 
    - TRACE 
    - OPTIONS 
    - CONNECT
    - HEAD
- Requisição e Resposta: 

                (url + params)
    Cliente --------------------->  Servidor
            <---------------------
        (html,css, js, imagens, videos)

- Requisição do tipo GET:
    - http request
    - os parâmetros vão na URL (CABEÇALHO)
        Ex: Pesquisa no google direto na barra com parâmetros:
            Fazendo uma pesquisa em inglês sobre linux q = query, hl = head language
            https://www.google.com.br/search?q=linux&hl=en-US

- Requisição do tipo POST, os parametros vão no corpo "body"
    - http request
    - parâmetros dentro do corpo (body)

- https é mais seguiro do que http, você não encontra a senha do usuário no body, por exemplo.
- Grupos de Status HTTP:
    - 1xx - Informação
    - 2xx - Sucesso
    - 3xx - Redirecionamento (Ex: URL mudou)
    - 4xx - Erro no Cliente (Ex: Erro 404 requisição para endereço inexistente)
    - 5xx - Erro no Servidor (Ex: Erro no servidor, banco de dados...)


---------------------------------------------------------------------------------------------
# Servidor WEB:
---------------------------------------------------------------------------------------------
WEB E DNS
- Quando você compra um domínio, você registra o DNS
- Quando o cliente faz a requisição no IP do servidor do seu site, é feita uma consulta
  DNS.

- Virtual Hosting
    - Um único servidor web por atender diversas requisições
    - Um sistema pode estar distribuido em vários servidores

- Estrutura de Pastas dentro do servidor
    - imagens
    - css
    - js
    - index.html

- WEB Stack
    - Linguagem
    - Web Server | DB 
    - Sistema Operacional

    LAMP = Linux Apache MySQL PHP

---------------------------------------------------------------------------------------------
# Client Side Vs Server Side:
---------------------------------------------------------------------------------------------
- era do "mainframe"
- era do "client-server"

- era da "web-server-side" ...
    - toda a renderização da página são processadas/geradas do lado do servidor;

- era do front-end + services
    - front-end (SPA) = Single Page Aplication

---------------------------------------------------------------------------------------------
# Conteúdo Stático Vs Dinâmico:
---------------------------------------------------------------------------------------------
- Do ponto de vista do server-side, o conteúdo é estático quando ele somente lê o arquivo do server
  e retorna o conteúdo para uma página. O conteúdo dinâmico, é aquele que é gerado a partir de um código.

    Estático:   arquivo que será lido e enviado o conteúdo para o browser.
    - index.js
    - index.html
    - about.html
    - imagens
    - videos 
    ...
    
    Dinâmico:   código que gera o html que é mandado para o browser
    - /clientes 
    - /produtos/app 

- Os recursos estáticos possui um custo computacional menor do que o dinâmico.
    Ex: Gerar um conteúdo dinâmico é necessário fazer uma consulta em um banco de dados, por exemplo
        então, isso possui um custo computacional e é lento. Fazer essa consulta, e gerar o html estático 
        deixando guardado no servidor para ser servido a página quando necessário, é um método eficar de reduzir
        esse custo em tempo. Por exemplo, um script programado para fazer essa consulta de 5 em 5 min,
        e deixar o conteúdo da página html pronto estático guardado no servidor esperando a requisição,
        caso ela seja realizada ou não, o conteúdo será atualizado de 5 em 5 min, e esse tempo de espera durante 
        a request não acontecerá, pois o script já deixou o html pronto para ser lido de forma estática.
        - Essa técnica tem sido muito adotada recentemente.
     
---------------------------------------------------------------------------------------------
# HTML, CSS e JAVASCRIPT:
---------------------------------------------------------------------------------------------
HTML = Estrutura 
CSS = Estilo 
JAVASCRIPT = Comportamento

---------------------------------------------------------------------------------------------
# DNS:
---------------------------------------------------------------------------------------------
- O DNS traduz nomes de domínios "http://www.dominio.com.br" para endereços ip "54.69.61.89";
- É possível configurar o DNS usando o provedor de domínio que você adquiriu, ex: dominio.br;
- O DNS funciona usando o protocolo UDP na porta 53;

Funcionamento básico do DNS:
    * Usuário informa o endereço no browser 
    * Computador envia uma consulta DNS para o servidor local
    * O servidor responde com o endereço IP 
    * Computador acessa o servidor a partir do IP obtido

Buscas do DNS?
    * Busca Recursiva 
        - Toda máquina precisa de um DNS referenciado
        - Quando a máquina não possuim o endereço cadastrado com o IP, então será enviado para outros servidores 
          DNS a verificação desse endereço solicitado, buscando respostas sobre o conhecimento do endereço. 
          Será respondido com o endereço e será feito um Cache no servidor DNS primário.
    * Busca Iterativa
        - Quando é feita uma requisição com um endereço, o servidor em vez de retornar o IP, ele passa a referência
          de outro servidor DNS para atender a requisição. 

Registros DNS (DNS Records):
    Principais: 
        * A - IPv4
        * AAAA - IPv6 
        * MX - Servidor de Email 
        * NS - Servidor DNS 
        * CNAME - Canonical Name (Apelido)

---------------------------------------------------------------------------------------------
# HTTP Seguro (HTTPs):
---------------------------------------------------------------------------------------------
    - HTTP seguro;
    - HTTP + TLS (Transport Layer Security Protocol "SSL V4")   SSL (Secure Sockets Layer Protocol)
    - A comunicação é criptografada, diferente do HTTP;
    - Certificado é diferente de protocolo;

    - Dados criptografados usando os protocolos TLS ou SSL;
    - Protege contra interceptação (Man In The Middle);
    - Criptografa todas as informações: Além da requisição, URL, cookies e headers;
    - Usa certificados digitais;

Autoridades Certificadoras (CA):
    - Organizações que emitem e validam certificados;
    - É preciso instalar o certificado no browser e no servidor, para durante o tráfego dos dados, o transporte
      ocorra criptografado e ao chegar no browser, será reconhecido como um certificado válido. Caso não esteja
      instalado no broser, o certificado não será reconhecido como válido. Alguns certificados mais "famosos", já 
      vem instalados nos browsers por padrão.
      - Let`s Encrypt (Autoridade Certificadora gratuita)

---------------------------------------------------------------------------------------------
# WEB Services:
---------------------------------------------------------------------------------------------
    - É um serviço WEB, você possui um serviço que a sua aplicação provê. Ex: Um serviço que retorna todos os 
      usuários de um sistema de negócios que estão devendo.
    - Via de regra, os serviços web trabalham com formatos textuais, como JSON;
    
    - Duas grandes alternativas para trabalhar com WEB Services: 
        
        - SOAP = Simple Object Acess Protocol
            - Versão mais antiga, mais burocrática;
            - WSDL (Web Service Description Language) Descreve quais são as funcionalidades que um serviço disponibiliza;
            - XML, RPC (Remote Procedure Call)
            - O SOAP é baseado em XML;
             
        - REST = Representational State Transfer  
            - Mais símples e mais leve de trabalhar;
            - JSON 
            - HTTP 
            - RESTful -> Se você segue a convenção estabelecida pelo REST, quer dizer que seu serviço é RESTful.
              Pois ele tem uma convenção arquitetural REST;
        
        * Convenções RESTful (Gira entorno do CRUDE (Create, Read, Update, Delete) Operações Básicas de um Banco de Dados):

        URL             |     Método   |   Descrição
        ----------------------------------------------------
        /clientes       |     POST     |  Incluir Novo cliente 
        /clientes       |     GET      |  Obtém todos os clientes Cadastrados 
        /clientes/36    |     GET      |  Obtém cliente 36 (id: 36)
        /clientes/12    |     PUT      |  Atualiza cliente 12
        /clientes/41    |    DELETE    |  Exclui cliente 41


Escolhas Arquiteturais: 
    SOA Vs MicroService

    SOA
        - Arquitetura mais antiga;

    Microserviços 
        - Pegar uma aplicação maior e quebrar em microserviços;
        Ex: Spotfy, existe uma equipe específica para criação de playlists. Então, foi criado um microserviço 
            somente para criação de playlists onde essa equipe trabalha;
            - A equipe é responsável pelos testes, aplicação de integração contínua...
        - É como se fosse pequenos projetos independentes que somando dá uma aplicação completa;

        - Você pode quebrar uma aplicação em diversos microserviços e delegar funções específicas para uma equipe,
          tornando a aplicação mais fácil de evoluir;

---------------------------------------------------------------------------------------------
# Computação em Nuvem:
---------------------------------------------------------------------------------------------
    - As nuvens são feitas principalmente de servidores linux;
    - As nuvens, você paga de acordo com a quantidade de usos;
        - Antigamente, vocÊ tinha que montar a estrutura inteira dentro da empresa... com gastos de energia,
          máquinas, cabeamento e montagem da rede..
    - Autoscaling: Aumentar e diminuir a máquina, aumentando memória, processadores....
    - É possível você automatizar a sua aplicação pra ligar e desligar máquinas, de acordo com a necessidade,
      fazendo com que seja reduzido o curso financeiro das máquinas. Por exemplo, você pode no natal, fazer com que 
      mais máquinas estejam disponíveis para o seu site de compras, porquê existe uma demanda muito maior nessa época,
      e quando passada a época, as máquinas serão desligadas e um mínimo de 8 máquinas, por exemplo, continuará funcionando.
    - IAAS -> Nuvem de infraestrutura
    - AWS -> Amazon Web Service <https://console.aws.amazon.com>
    - Você tem também plataformas de desenvolvimento como máquinas disponíveis, configuradas em uma determinada
      linguagem,por exemplo, um JDK.. 
            - Google Cloud Platform <https://cloud.google.com/?hl=pt-BR>
    - Existem também Software as a Service, são máquinas para softwares.
